{"pageProps":{"title":"Cryptography basics: breaking repeated-key XOR ciphertext","description":"a (kind of) nice introduction to cryptography","date":"Tue Jul 05 2022","content":"\nIn this post, we are going to learn a bit of what is the XOR encryption algorithm and how to decipher it through Friedman Test using Hamming Distance and Frequency Analysis.\n\n### First of all, what exactly is a XOR cipher?\nIf you ever studied bitwise operators, you have already heard of _exclusive or_, or simply XOR.\nIt takes two inputs and returns 1 if these inputs are different.\n![xor truth table](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6iqp9pb4z712uc51ksc.png)\n\nBut the interesting part is that this simple operation, that happens in the bits level, is very useful for **composing cryptographic keys.** That's what we'll see in this post, using a bit of Python and the problem presented in the 6th challenge of Cryptopals (set 1)\n\n### How can we use XOR as a method of encryption? In fact, what is a cryptographic cipher?\nTo answer this question, let's think in terms of functions. Encrypting a message is taking its plaintext (or, more precisely, its _bytes_), and generating an appearing random output with the help of an _encryption algorithm_. **This algorithm defines the pattern we'll follow when replacing the original content with the encrypted one.**\nFor example, the Caesar cipher replaces a letter with its corresponding following letter, such that \"ABC\" becomes \"BCD\". This pattern goes through the whole message. \nBut the Caesar cipher can skip more than one letter - what matters here is the logic of substitution. In this way, the **XOR cipher is very similar.**\n\n### Bytes, ASCII and single-byte XOR\nBefore introducing the encryption with a repeating cipher, let's first understand how a single-byte encryption would be done.\nThe encryption with a single-byte XOR cipher is made when we use the XOR operation to change the value of each byte; we make this operation in the whole text using a key - that is the constant value which we are going to use to do this operation.\n\n```python\nbinary_string = b\"hello\"\nfor byte in binary_string:\n   print(byte ^ 100)\n```\nThe outputs will be `12, 1, 8, 8` and `11`.\nIt happens because each letter in a binary string can be represented by a binary number that, XORed against 100 (the key here), returns a different byte. This number could be any value within the range [0, 255].\nTherefore, here `100` acts as our key - we would need to know this value to perform the decryption of the message. **Using a XOR cipher is a symmetric encryption method, what means that we need the same key both to encrypt and decrypt a message**. It happens because XOR is an involutory function - it's its own inverse, so to decrypt a message we would need to simply XOR its bytes against the key again.\n![xor explained](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgl2ug8cbr2uzzsag85c.png) \nSo, we already have a substitution cipher similar in terms of Caesar cipher, _but a bit more sophisticated._\n\n_**Side note 1:** it turns out that not all XORed bytes will be printable, since they can be outside the ASCII range. In this case, we can make a conversion to base64, for example, to print them. See [(in Portuguese)](https://dev.to/wrongbyte/como-funciona-a-codificacao-em-base64-2njd)_.\n_**Side note 2:** the article above can also be helpful to help you understand how things work with ASCII characters in byte-level_.\n\n### Repeating XOR cipher\nIt turns out that encrypting something with a single-byte key would be a very weak encryption method. To break it, we would only need to know which key was used - which could be achieved by bruteforcing all the 256 possible values. Then, we could look at the outputs of these operations and choose the one that is more \"English-like\", by assign scores to each output, based on the most frequent letters across the English language.\n\n**PS: remember this function, we are going to see it later again!**\n```python\n# Breaking a single-byte XOR cipher: we perform a XOR operation\n# in the string using all possible values for the key.\n# The key used to generate the output closer to English is what we are searching for.\ndef assign_score(output_string):\n    string_score = 0\n    freq = [' ', 'e', 't', 'a', 'o', 'i', 'n', 's', 'h', 'r', 'd', 'l', 'u']\n    for letter in output_string:\n        if letter in freq:\n            string_score += 1\n    return string_score\n\ndef XOR_decode_bytes(encoded_array):\n    last_score = 0\n    greatest_score = 0\n    for n in range(256): # checks for every possible value for XOR key\n        xord_str = [byte ^ n for byte in encoded_array]\n        xord_ascii = ('').join([chr(b) for b in xord_str])\n        last_score = assign_score(xord_ascii)\n        if (last_score > greatest_score):\n            greatest_score = last_score\n            key = n\n    return key\n```\n\nSo, we can make it harder to break by simply creating a longer key - with more bytes and that repeats itself across the text.\nIt would require us two steps to break: first, we would need to know the length of the key, and then we would need to know the key itself - which means testing each possible value for each one of the key's characters. A bit more complicated, right?\n\nSo, let's understand how to encrypt a text using a XOR repeating key first.\n\n### Repeating key: encryption\n```python\ninput_text1 = b\"Burning 'em, if you ain't quick and nimble\\nI go crazy when I hear a cymbal\"\nXOR_key = b\"ICE\"\n\ndef XOR_repeating_encode(input_string: bytes, key: bytes) -> bytes:\n    xord_output = []\n    print(input_string)\n    for i in range(len(input_string)):\n        xord_output.append(input_string[i] ^ key[i % len(key)])\n\n    return bytes(xord_output)\n```\nThe logic here is pretty the same we used for the single-byte key. In short, we perform a XOR operation against each of the characters of the key, which is `ICE` here. So, \"B\" is XORed against \"I\", \"u\" against \"C\" and \"r\" against \"E\", and so forth until we reach the end of the text. Getting the plaintext back is achieved through the same process.\n\n### But what if we wanted to recover the plaintext without knowing the key?\nHere things start to get interesting. Let's see how to break a repeated-key XOR ciphertext!\n\n### 1 - The key's length: Hamming distance\nHow far is \"a\" from \"d\"?\nYou may say that they are a few letters apart in the alphabet. But there's another interesting way to measure their \"distance\": how many different bits they have - which is their **Hamming distance**.\nSo, lowercase a is 95 in the ASCII table, and lowercase d is 100. Their binary representations are `1011111` and `1100100`. They have 5 different bits, so **their hamming distance is 5**.\nYou can measure this distance across phrases, too - the process is the same, you only sum the result from each pair of characters.\n\n### What this measure has to do with the repeating XOR cipher?\nThe average Hamming distance between two bytes picked at random is around `4.0`, while that of any two lowercased ASCII alphabet - whose values range from 97 to 122 - is `2.5`.\nSo it means that the hamming distance between the characters of a plaintext will be much lower than that from a bunch of random bytes - and this information is very useful when we get to test the possible outputs for a variety of possible key lengths.\n\nLet's understand it better.\n\n```python\ndef hamming_distance(string1: bytes, string2: bytes) -> int:\n    distance = 0\n    for (byte1, byte2) in zip(string1, string2):\n        distance += bin(byte1 ^ byte2).count('1')\n    return distance\n```\nChecking the different bits of two strings is basically the same as performing an XOR operation on them and counting the 1's, so the function above does exactly this. \nAlright. We now have a way to score a string to know the distance between its bytes. How can we use it now?\n\nIn this challenge, the range of the size of possible keys is within the interval [2, 40]. Therefore, we will have to do the following steps:\n**1) Divide our text into different chunk sizes, ranging from 2 to 40.\n2) On each iteration - for each chunk size chosen - we will check the hamming score between the chunks.\n3) The length of chunks with the lower average hamming distance corresponds to the key's length.**\n\nThis technique works because, once we get the right size for the key, the chunks will be just XORed plaintext. Therefore, their hamming distance will be way lower than if they were random bytes. \n```python\ndef find_key_length():\n     # we are searching for the length that produces an output with the lowest hamming score\n     min_score = len(text)\n\n     for keysize in range(2, 40):\n        chunks = [text[start:start + keysize] for start in range(0, len(text), keysize)]\n        subgroup = chunks[:4]\n        # getting the average hamming distance per byte\n        average_score = (sum(hamming_distance(a, b) for a,b in combinations(subgroup, 2)) / 6) / keysize\n        if average_score < min_score:\n            min_score = average_score\n            key_length = keysize\n\n    return key_length\n```\nIn the code above, the logic is as it follows:\nLet's say that we are guessing that the key is 4 characters long. If we had the following text:\n```python\ntext = \"YWJjZGVmZ2hpamtsbW4=\"\n```\nWe would divide it in several chunks with four letters each:\n```python\nchunks = ['YWJj', 'ZGVm', 'Z2hp', 'amts', 'bW4=']\n```\nNow, if we take the first four chunks, we are able to measure the average hamming distance between them:\n```python\n# keysize here is equal to 4 and subgroup is the first four chunks\n# dividing the score by 6 gives us the average diff between chunks, dividing it by keysize gives us the average diff between each a, b bytes for chunk1, chunk2\naverage_score = (sum(hamming_distance(a, b) for a,b in combinations(subgroup, 2)) / 6) / keysize\n```\n\n\n### 2 - The key itself\n\nOnce we get the key's length, things get easier. \nIn this particular challenge, it turns out that the key is 29 characters long. Even though we know the length, we still have 29 characters to guess, each one having 256 possibilities.\n\nHow to do that? Well, the answer lies on matrices.\n\n```python\ndef find_key(key_length = find_key_length()): \n    key_blocks = [text[start:start + key_length] for start in range(0, len(text), key_length)]\n    # transpose the 2D matrix\n    key = []\n    single_XOR_blocks = [list(filter(None,i)) for i in zip_longest(*key_blocks)]\n    for block in single_XOR_blocks:\n        key_n = XOR_decode_bytes(block)\n        key.append(key_n)\n\n    ascii_key = ''.join([chr(c) for c in key])\n    return ascii_key.encode()\n```\n\nIf our key had exactly three characters - say the key was \"RED\" - then each first character of each chunk would be XORed against \"R\", the second against \"E\" and so on.\nSo, if we joined each nth character of each chunk, the result would be a list of characters encrypted with a single byte XOR cipher, whose key is the nth character of our repeating key!\n\nOof, that's too much. Let's see it in detail:\n![cute](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/putpgy2fh4t59m8syaa7.png)\n\nThe operation of creating an array joining every nth element of each chunk is basically transposing a matrix. \nTo finally discover the key, then, we just need to apply the function that finds the key for a single-byte XOR ciphertext in each of the lines of our new generated matrix.\nAnd now, we have our deciphered plaintext! \n![result](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekoposymtd36shxw14z6.png)\n\nYou can see the full code for this post [here](https://github.com/wrongbyte/study-stuff/blob/main/cryptopals/set1/6_break_repeatingXOR.py).\n \n","slug":"breakrepeatingxor","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h3: \"h3\",\n      em: \"em\",\n      img: \"img\",\n      strong: \"strong\",\n      pre: \"pre\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"In this post, we are going to learn a bit of what is the XOR encryption algorithm and how to decipher it through Friedman Test using Hamming Distance and Frequency Analysis.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"First of all, what exactly is a XOR cipher?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you ever studied bitwise operators, you have already heard of \", _jsx(_components.em, {\n          children: \"exclusive or\"\n        }), \", or simply XOR.\\nIt takes two inputs and returns 1 if these inputs are different.\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6iqp9pb4z712uc51ksc.png\",\n          alt: \"xor truth table\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"But the interesting part is that this simple operation, that happens in the bits level, is very useful for \", _jsx(_components.strong, {\n          children: \"composing cryptographic keys.\"\n        }), \" That's what we'll see in this post, using a bit of Python and the problem presented in the 6th challenge of Cryptopals (set 1)\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"How can we use XOR as a method of encryption? In fact, what is a cryptographic cipher?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To answer this question, let's think in terms of functions. Encrypting a message is taking its plaintext (or, more precisely, its \", _jsx(_components.em, {\n          children: \"bytes\"\n        }), \"), and generating an appearing random output with the help of an \", _jsx(_components.em, {\n          children: \"encryption algorithm\"\n        }), \". \", _jsx(_components.strong, {\n          children: \"This algorithm defines the pattern we'll follow when replacing the original content with the encrypted one.\"\n        }), \"\\nFor example, the Caesar cipher replaces a letter with its corresponding following letter, such that \\\"ABC\\\" becomes \\\"BCD\\\". This pattern goes through the whole message.\\nBut the Caesar cipher can skip more than one letter - what matters here is the logic of substitution. In this way, the \", _jsx(_components.strong, {\n          children: \"XOR cipher is very similar.\"\n        })]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Bytes, ASCII and single-byte XOR\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Before introducing the encryption with a repeating cipher, let's first understand how a single-byte encryption would be done.\\nThe encryption with a single-byte XOR cipher is made when we use the XOR operation to change the value of each byte; we make this operation in the whole text using a key - that is the constant value which we are going to use to do this operation.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"binary_string = b\\\"hello\\\"\\nfor byte in binary_string:\\n   print(byte ^ 100)\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The outputs will be \", _jsx(_components.code, {\n          children: \"12, 1, 8, 8\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"11\"\n        }), \".\\nIt happens because each letter in a binary string can be represented by a binary number that, XORed against 100 (the key here), returns a different byte. This number could be any value within the range [0, 255].\\nTherefore, here \", _jsx(_components.code, {\n          children: \"100\"\n        }), \" acts as our key - we would need to know this value to perform the decryption of the message. \", _jsx(_components.strong, {\n          children: \"Using a XOR cipher is a symmetric encryption method, what means that we need the same key both to encrypt and decrypt a message\"\n        }), \". It happens because XOR is an involutory function - it's its own inverse, so to decrypt a message we would need to simply XOR its bytes against the key again.\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgl2ug8cbr2uzzsag85c.png\",\n          alt: \"xor explained\"\n        }), \"\\nSo, we already have a substitution cipher similar in terms of Caesar cipher, \", _jsx(_components.em, {\n          children: \"but a bit more sophisticated.\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsxs(_components.em, {\n          children: [_jsx(_components.strong, {\n            children: \"Side note 1:\"\n          }), \" it turns out that not all XORed bytes will be printable, since they can be outside the ASCII range. In this case, we can make a conversion to base64, for example, to print them. See \", _jsx(_components.a, {\n            href: \"https://dev.to/wrongbyte/como-funciona-a-codificacao-em-base64-2njd\",\n            children: \"(in Portuguese)\"\n          })]\n        }), \".\\n\", _jsxs(_components.em, {\n          children: [_jsx(_components.strong, {\n            children: \"Side note 2:\"\n          }), \" the article above can also be helpful to help you understand how things work with ASCII characters in byte-level\"]\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Repeating XOR cipher\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"It turns out that encrypting something with a single-byte key would be a very weak encryption method. To break it, we would only need to know which key was used - which could be achieved by bruteforcing all the 256 possible values. Then, we could look at the outputs of these operations and choose the one that is more \\\"English-like\\\", by assign scores to each output, based on the most frequent letters across the English language.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"PS: remember this function, we are going to see it later again!\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"# Breaking a single-byte XOR cipher: we perform a XOR operation\\n# in the string using all possible values for the key.\\n# The key used to generate the output closer to English is what we are searching for.\\ndef assign_score(output_string):\\n    string_score = 0\\n    freq = [' ', 'e', 't', 'a', 'o', 'i', 'n', 's', 'h', 'r', 'd', 'l', 'u']\\n    for letter in output_string:\\n        if letter in freq:\\n            string_score += 1\\n    return string_score\\n\\ndef XOR_decode_bytes(encoded_array):\\n    last_score = 0\\n    greatest_score = 0\\n    for n in range(256): # checks for every possible value for XOR key\\n        xord_str = [byte ^ n for byte in encoded_array]\\n        xord_ascii = ('').join([chr(b) for b in xord_str])\\n        last_score = assign_score(xord_ascii)\\n        if (last_score > greatest_score):\\n            greatest_score = last_score\\n            key = n\\n    return key\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, we can make it harder to break by simply creating a longer key - with more bytes and that repeats itself across the text.\\nIt would require us two steps to break: first, we would need to know the length of the key, and then we would need to know the key itself - which means testing each possible value for each one of the key's characters. A bit more complicated, right?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, let's understand how to encrypt a text using a XOR repeating key first.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Repeating key: encryption\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"input_text1 = b\\\"Burning 'em, if you ain't quick and nimble\\\\nI go crazy when I hear a cymbal\\\"\\nXOR_key = b\\\"ICE\\\"\\n\\ndef XOR_repeating_encode(input_string: bytes, key: bytes) -> bytes:\\n    xord_output = []\\n    print(input_string)\\n    for i in range(len(input_string)):\\n        xord_output.append(input_string[i] ^ key[i % len(key)])\\n\\n    return bytes(xord_output)\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The logic here is pretty the same we used for the single-byte key. In short, we perform a XOR operation against each of the characters of the key, which is \", _jsx(_components.code, {\n          children: \"ICE\"\n        }), \" here. So, \\\"B\\\" is XORed against \\\"I\\\", \\\"u\\\" against \\\"C\\\" and \\\"r\\\" against \\\"E\\\", and so forth until we reach the end of the text. Getting the plaintext back is achieved through the same process.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"But what if we wanted to recover the plaintext without knowing the key?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here things start to get interesting. Let's see how to break a repeated-key XOR ciphertext!\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"1 - The key's length: Hamming distance\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"How far is \\\"a\\\" from \\\"d\\\"?\\nYou may say that they are a few letters apart in the alphabet. But there's another interesting way to measure their \\\"distance\\\": how many different bits they have - which is their \", _jsx(_components.strong, {\n          children: \"Hamming distance\"\n        }), \".\\nSo, lowercase a is 95 in the ASCII table, and lowercase d is 100. Their binary representations are \", _jsx(_components.code, {\n          children: \"1011111\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"1100100\"\n        }), \". They have 5 different bits, so \", _jsx(_components.strong, {\n          children: \"their hamming distance is 5\"\n        }), \".\\nYou can measure this distance across phrases, too - the process is the same, you only sum the result from each pair of characters.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"What this measure has to do with the repeating XOR cipher?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The average Hamming distance between two bytes picked at random is around \", _jsx(_components.code, {\n          children: \"4.0\"\n        }), \", while that of any two lowercased ASCII alphabet - whose values range from 97 to 122 - is \", _jsx(_components.code, {\n          children: \"2.5\"\n        }), \".\\nSo it means that the hamming distance between the characters of a plaintext will be much lower than that from a bunch of random bytes - and this information is very useful when we get to test the possible outputs for a variety of possible key lengths.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let's understand it better.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"def hamming_distance(string1: bytes, string2: bytes) -> int:\\n    distance = 0\\n    for (byte1, byte2) in zip(string1, string2):\\n        distance += bin(byte1 ^ byte2).count('1')\\n    return distance\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Checking the different bits of two strings is basically the same as performing an XOR operation on them and counting the 1's, so the function above does exactly this.\\nAlright. We now have a way to score a string to know the distance between its bytes. How can we use it now?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In this challenge, the range of the size of possible keys is within the interval [2, 40]. Therefore, we will have to do the following steps:\\n\", _jsx(_components.strong, {\n          children: \"1) Divide our text into different chunk sizes, ranging from 2 to 40.\\n2) On each iteration - for each chunk size chosen - we will check the hamming score between the chunks.\\n3) The length of chunks with the lower average hamming distance corresponds to the key's length.\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This technique works because, once we get the right size for the key, the chunks will be just XORed plaintext. Therefore, their hamming distance will be way lower than if they were random bytes.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"def find_key_length():\\n     # we are searching for the length that produces an output with the lowest hamming score\\n     min_score = len(text)\\n\\n     for keysize in range(2, 40):\\n        chunks = [text[start:start + keysize] for start in range(0, len(text), keysize)]\\n        subgroup = chunks[:4]\\n        # getting the average hamming distance per byte\\n        average_score = (sum(hamming_distance(a, b) for a,b in combinations(subgroup, 2)) / 6) / keysize\\n        if average_score < min_score:\\n            min_score = average_score\\n            key_length = keysize\\n\\n    return key_length\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In the code above, the logic is as it follows:\\nLet's say that we are guessing that the key is 4 characters long. If we had the following text:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"text = \\\"YWJjZGVmZ2hpamtsbW4=\\\"\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We would divide it in several chunks with four letters each:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"chunks = ['YWJj', 'ZGVm', 'Z2hp', 'amts', 'bW4=']\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now, if we take the first four chunks, we are able to measure the average hamming distance between them:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"# keysize here is equal to 4 and subgroup is the first four chunks\\n# dividing the score by 6 gives us the average diff between chunks, dividing it by keysize gives us the average diff between each a, b bytes for chunk1, chunk2\\naverage_score = (sum(hamming_distance(a, b) for a,b in combinations(subgroup, 2)) / 6) / keysize\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"2 - The key itself\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Once we get the key's length, things get easier.\\nIn this particular challenge, it turns out that the key is 29 characters long. Even though we know the length, we still have 29 characters to guess, each one having 256 possibilities.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"How to do that? Well, the answer lies on matrices.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          children: \"def find_key(key_length = find_key_length()): \\n    key_blocks = [text[start:start + key_length] for start in range(0, len(text), key_length)]\\n    # transpose the 2D matrix\\n    key = []\\n    single_XOR_blocks = [list(filter(None,i)) for i in zip_longest(*key_blocks)]\\n    for block in single_XOR_blocks:\\n        key_n = XOR_decode_bytes(block)\\n        key.append(key_n)\\n\\n    ascii_key = ''.join([chr(c) for c in key])\\n    return ascii_key.encode()\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If our key had exactly three characters - say the key was \\\"RED\\\" - then each first character of each chunk would be XORed against \\\"R\\\", the second against \\\"E\\\" and so on.\\nSo, if we joined each nth character of each chunk, the result would be a list of characters encrypted with a single byte XOR cipher, whose key is the nth character of our repeating key!\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Oof, that's too much. Let's see it in detail:\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/putpgy2fh4t59m8syaa7.png\",\n          alt: \"cute\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The operation of creating an array joining every nth element of each chunk is basically transposing a matrix.\\nTo finally discover the key, then, we just need to apply the function that finds the key for a single-byte XOR ciphertext in each of the lines of our new generated matrix.\\nAnd now, we have our deciphered plaintext!\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekoposymtd36shxw14z6.png\",\n          alt: \"result\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can see the full code for this post \", _jsx(_components.a, {\n          href: \"https://github.com/wrongbyte/study-stuff/blob/main/cryptopals/set1/6_break_repeatingXOR.py\",\n          children: \"here\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}