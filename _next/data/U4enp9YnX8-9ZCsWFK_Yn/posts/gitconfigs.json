{"pageProps":{"title":"How git stores your configs","description":"Have you ever wondered what's inside the .git directory?","date":"Sun May 01 2022","content":"\n\n### How commits work?\nA commit contains information related not only to changes in files, but also to the committers in general. Github, for example, uses emails to link committers to their respective accounts in the platform.\n\nTherefore, working with git configs means directly changing the information associated with your commits.\n\n### Viewing your configs\n\nIf you have ever had to change or view the name or email displayed in your commits, you probably know the `git config user.name` command, or its variation `git config user.email`. These commands are useful to check the information associated with your commits.\n\nBut how git stores these configs _under the hood?_\n\n## Local and global configs\nGit stores configs in two different ways: globally or locally. Just like npm modules, the difference is where the files will be stored - inside of your current directory or in a system directory, being accessible from your whole system. **This differentiation is useful when, for example, working with multiple git accounts on the same computer.** You will be able to configure which account you will be using for each repository.\n\n### Locally: the `.git` directory\nEvery time you start a git repository, what you are essentially doing is creating a .git directory inside it. You can open this file in VSCode by navigating to /.git (`cd .git`) and typing `code .`\nAn empty repository will usually have a .git structure like this:\n![git folder](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qdhnudhqws5kofj5zvn.png)\n \nEvery interactive git change you do in your repository - that opens a text editor, by default Vim on windows - is going to edit git files in this folder. For example, let's say we forgot to use the `-m` flag when committing changes and it triggered a text editor to open:\n![vscode](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvkqvast73w8r3uy5a32.png)\n or, in Vim:\n![vim](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgsuxgx2gig9latpeubf.png)\n \n \nIn both cases, what you are doing is editing a file called _COMMIT_EDITMSG_ inside of your .git directory. \n![commit message](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4harp6196xtdklqci4x2.png)\n \nIt also happens when you use the `rebase -i` command; in this case, you create a directory called _rebase-merge_, that contains the file `git-rebase-todo`, which is where you are going to make the changes.\nGit is also able to see if there's an ongoing rebase by checking if this directory exists or not:\n![ongoing rebase](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/say4murd353i9a1tndbd.png)\n\n![git error](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q045es2apmadl5tqzdif.png)\n \n### Okay, but.. What does it have to do with configs?\nAll of these stuff happens locally, inside of your repository. Naturally, the config file is also there, in a file named `config` as well.\n\nIf you open it, you'll be able to see a file like this:\n![git config](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm4o6nvqy5vhfmb2ih2c.png)\n\nThese settings include the url of the remote repository, and some information about branches and merges.\nSee, for example, what happens if we change the \"origin\" - the remote url - to something different, by changing its URL:\n`git remote set-url origin google.com`\n![diff settings](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g252v177etxhszbb2ai3.png)\n\nNow, our remote URL points to `google.com` in the current repository.\nCommands such as `git remote set-url origin` are shortcuts for editing the config file directly in your CLI. But these properties are not the only ones you can change; let's say that we have multiple github accounts and want to set which one we are going to use for commits in a particular repository.\nWe can do so by adding, to our config file, the following properties:\n![change user etc](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5e94w05wiad7f98umrs.png)\n \n**By doing so, we are overriding, for this repository, the _global git configs_.**\n\n_Side note: of course, using two github accounts on the same computer requires some additional steps, such as adding credentials to the Windows Credentials Manager, etc. But for customizing the author of commits, the method described here works._\n\n###Okay, but.. Where are the global git settings stored?\nEven though you want to change the committer's information for a repository, git has some default settings what will be shared with every new file tracked with git in your system. These are the global configs, and you can see them by typing `git config --list --local`. ~~yeah, it also works with the --local flag~~\nUnlike the local configs, the global ones are stored inside of a file called `.gitconfig`, that is inside of your system user directory. The changes applied to this file will have the same effect of setting things in the git CLI with a `--global` flag.\n\n### In conclusion...\nEven though it's not very common to make changes in .git files directly (instead, you are probably going to use git bash), it may be useful to understand a bit of how things work under the hood. After all, git deals with your files by creating also some other files to track information. I encourage you to take a look not only at the `config` file but also at other files and folders inside `.git`, you may find interesting things there!","slug":"gitconfigs","source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h3: \"h3\",\n      p: \"p\",\n      code: \"code\",\n      em: \"em\",\n      h2: \"h2\",\n      strong: \"strong\",\n      img: \"img\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h3, {\n        children: \"How commits work?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"A commit contains information related not only to changes in files, but also to the committers in general. Github, for example, uses emails to link committers to their respective accounts in the platform.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Therefore, working with git configs means directly changing the information associated with your commits.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Viewing your configs\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you have ever had to change or view the name or email displayed in your commits, you probably know the \", _jsx(_components.code, {\n          children: \"git config user.name\"\n        }), \" command, or its variation \", _jsx(_components.code, {\n          children: \"git config user.email\"\n        }), \". These commands are useful to check the information associated with your commits.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"But how git stores these configs \", _jsx(_components.em, {\n          children: \"under the hood?\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Local and global configs\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Git stores configs in two different ways: globally or locally. Just like npm modules, the difference is where the files will be stored - inside of your current directory or in a system directory, being accessible from your whole system. \", _jsx(_components.strong, {\n          children: \"This differentiation is useful when, for example, working with multiple git accounts on the same computer.\"\n        }), \" You will be able to configure which account you will be using for each repository.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"Locally: the \", _jsx(_components.code, {\n          children: \".git\"\n        }), \" directory\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Every time you start a git repository, what you are essentially doing is creating a .git directory inside it. You can open this file in VSCode by navigating to /.git (\", _jsx(_components.code, {\n          children: \"cd .git\"\n        }), \") and typing \", _jsx(_components.code, {\n          children: \"code .\"\n        }), \"\\nAn empty repository will usually have a .git structure like this:\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qdhnudhqws5kofj5zvn.png\",\n          alt: \"git folder\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Every interactive git change you do in your repository - that opens a text editor, by default Vim on windows - is going to edit git files in this folder. For example, let's say we forgot to use the \", _jsx(_components.code, {\n          children: \"-m\"\n        }), \" flag when committing changes and it triggered a text editor to open:\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvkqvast73w8r3uy5a32.png\",\n          alt: \"vscode\"\n        }), \"\\nor, in Vim:\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgsuxgx2gig9latpeubf.png\",\n          alt: \"vim\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In both cases, what you are doing is editing a file called \", _jsx(_components.em, {\n          children: \"COMMIT_EDITMSG\"\n        }), \" inside of your .git directory.\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4harp6196xtdklqci4x2.png\",\n          alt: \"commit message\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It also happens when you use the \", _jsx(_components.code, {\n          children: \"rebase -i\"\n        }), \" command; in this case, you create a directory called \", _jsx(_components.em, {\n          children: \"rebase-merge\"\n        }), \", that contains the file \", _jsx(_components.code, {\n          children: \"git-rebase-todo\"\n        }), \", which is where you are going to make the changes.\\nGit is also able to see if there's an ongoing rebase by checking if this directory exists or not:\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/say4murd353i9a1tndbd.png\",\n          alt: \"ongoing rebase\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q045es2apmadl5tqzdif.png\",\n          alt: \"git error\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Okay, but.. What does it have to do with configs?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"All of these stuff happens locally, inside of your repository. Naturally, the config file is also there, in a file named \", _jsx(_components.code, {\n          children: \"config\"\n        }), \" as well.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you open it, you'll be able to see a file like this:\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm4o6nvqy5vhfmb2ih2c.png\",\n          alt: \"git config\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"These settings include the url of the remote repository, and some information about branches and merges.\\nSee, for example, what happens if we change the \\\"origin\\\" - the remote url - to something different, by changing its URL:\\n\", _jsx(_components.code, {\n          children: \"git remote set-url origin google.com\"\n        }), \"\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g252v177etxhszbb2ai3.png\",\n          alt: \"diff settings\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now, our remote URL points to \", _jsx(_components.code, {\n          children: \"google.com\"\n        }), \" in the current repository.\\nCommands such as \", _jsx(_components.code, {\n          children: \"git remote set-url origin\"\n        }), \" are shortcuts for editing the config file directly in your CLI. But these properties are not the only ones you can change; let's say that we have multiple github accounts and want to set which one we are going to use for commits in a particular repository.\\nWe can do so by adding, to our config file, the following properties:\\n\", _jsx(_components.img, {\n          src: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5e94w05wiad7f98umrs.png\",\n          alt: \"change user etc\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsxs(_components.strong, {\n          children: [\"By doing so, we are overriding, for this repository, the \", _jsx(_components.em, {\n            children: \"global git configs\"\n          }), \".\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.em, {\n          children: \"Side note: of course, using two github accounts on the same computer requires some additional steps, such as adding credentials to the Windows Credentials Manager, etc. But for customizing the author of commits, the method described here works.\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"###Okay, but.. Where are the global git settings stored?\\nEven though you want to change the committer's information for a repository, git has some default settings what will be shared with every new file tracked with git in your system. These are the global configs, and you can see them by typing \", _jsx(_components.code, {\n          children: \"git config --list --local\"\n        }), \". ~~yeah, it also works with the --local flag~~\\nUnlike the local configs, the global ones are stored inside of a file called \", _jsx(_components.code, {\n          children: \".gitconfig\"\n        }), \", that is inside of your system user directory. The changes applied to this file will have the same effect of setting things in the git CLI with a \", _jsx(_components.code, {\n          children: \"--global\"\n        }), \" flag.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"In conclusion...\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Even though it's not very common to make changes in .git files directly (instead, you are probably going to use git bash), it may be useful to understand a bit of how things work under the hood. After all, git deals with your files by creating also some other files to track information. I encourage you to take a look not only at the \", _jsx(_components.code, {\n          children: \"config\"\n        }), \" file but also at other files and folders inside \", _jsx(_components.code, {\n          children: \".git\"\n        }), \", you may find interesting things there!\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}